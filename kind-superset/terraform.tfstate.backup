{
  "version": 4,
  "terraform_version": "1.10.3",
  "serial": 33,
  "lineage": "cbf0249d-8eff-5c02-2809-706b2855d681",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "superset",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "index_key": "clientb",
          "status": "tainted",
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "superset",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "clientb",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "4.1.2",
                "chart": "superset",
                "first_deployed": 1747565914,
                "last_deployed": 1747565914,
                "name": "clientb",
                "namespace": "clientb-superset",
                "notes": "CHART NAME: redis\nCHART VERSION: 17.9.4\nAPP VERSION: 7.0.10\n\n** Please be patient while the chart is being deployed **\n\nRedis\u0026reg; can be accessed via port 6379 on the following DNS name from within your cluster:\n\n    clientb-redis-master.clientb-superset.svc.cluster.local\n\n\n\nTo connect to your Redis\u0026reg; server:\n\n1. Run a Redis\u0026reg; pod that you can use as a client:\n\n   kubectl run --namespace clientb-superset redis-client --restart='Never'  --image docker.io/bitnami/redis:7.0.10-debian-11-r4 --command -- sleep infinity\n\n   Use the following command to attach to the pod:\n\n   kubectl exec --tty -i redis-client \\\n   --namespace clientb-superset -- bash\n\n2. Connect using the Redis\u0026reg; CLI:\n   redis-cli -h clientb-redis-master\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace clientb-superset svc/clientb-redis-master 6379:6379 \u0026\n    redis-cli -h 127.0.0.1 -p 6379\n\n\n\n1. Get the application URL by running these commands:\n  https://clientb.test.org/\n",
                "revision": 1,
                "values": "{\"affinity\":{},\"bootstrapScript\":\"#!/bin/bash\\n\\n# Install system-level dependencies\\napt-get update \\u0026\\u0026 apt-get install -y \\\\\\n  python3-dev \\\\\\n  default-libmysqlclient-dev \\\\\\n  build-essential \\\\\\n  pkg-config\\n# Install required Python packages\\npip install \\\\\\n  authlib \\\\\\n  psycopg2-binary \\\\\\n  mysqlclient \\\\\\n# Create bootstrap file if it doesn't exist\\nif [ ! -f ~/bootstrap ]; then\\n  echo \\\"Running Superset with uid {{ .Values.runAsUser }}\\\" \\u003e ~/bootstrap\\nfi\\n\",\"configFromSecret\":\"{{ template \\\"superset.fullname\\\" . }}-config\",\"configMountPath\":\"/app/pythonpath\",\"configOverrides\":{\"secret\":\"# Generate your own secret key for encryption. Use `openssl rand -base64 42` to generate a good key\\nSECRET_KEY = os.environ.get(\\\"SUPERSET_SECRET_KEY\\\").encode('utf-8').strip()\\n\"},\"configOverridesFiles\":{},\"envFromSecret\":\"superset-clientb-env\",\"envFromSecrets\":[],\"extraConfigMountPath\":\"/app/configs\",\"extraConfigs\":{},\"extraEnv\":{},\"extraEnvRaw\":[],\"extraLabels\":{},\"extraSecretEnv\":[],\"extraSecrets\":{},\"extraVolumeMounts\":[],\"extraVolumes\":[],\"fullnameOverride\":null,\"hostAliases\":[],\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"tech4dev/superset\",\"tag\":\"atecf-custom-v2-4.1.1\"},\"ingress\":{\"annotations\":{\"cert-manager.io/cluster-issuer\":\"letsencrypt-staging\",\"nginx.ingress.kubernetes.io/proxy-connect-timeout\":\"300\",\"nginx.ingress.kubernetes.io/proxy-read-timeout\":\"300\",\"nginx.ingress.kubernetes.io/proxy-send-timeout\":\"300\"},\"enabled\":true,\"extraHostsRaw\":[],\"hosts\":[\"clientb.test.org\"],\"ingressClassName\":\"nginx\",\"path\":\"/\",\"pathType\":\"ImplementationSpecific\",\"tls\":[{\"hosts\":[\"clientb.test.org\"],\"secretName\":\"client-tls\"}]},\"init\":{\"adminUser\":{\"email\":\"admin@superset.com\",\"firstname\":\"Superset\",\"lastname\":\"Admin\",\"password\":\"admin\",\"username\":\"admin\"},\"affinity\":{},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh\"],\"containerSecurityContext\":{},\"createAdmin\":true,\"enabled\":true,\"extraContainers\":[],\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres\"}],\"initscript\":\"#!/bin/sh\\nset -eu\\necho \\\"Upgrading DB schema...\\\"\\nsuperset db upgrade\\necho \\\"Initializing roles...\\\"\\nsuperset init\\n{{ if .Values.init.createAdmin }}\\necho \\\"Creating admin user...\\\"\\nsuperset fab create-admin \\\\\\n                --username {{ .Values.init.adminUser.username }} \\\\\\n                --firstname {{ .Values.init.adminUser.firstname }} \\\\\\n                --lastname {{ .Values.init.adminUser.lastname }} \\\\\\n                --email {{ .Values.init.adminUser.email }} \\\\\\n                --password {{ .Values.init.adminUser.password }} \\\\\\n                || true\\n{{- end }}\\n{{ if .Values.init.loadExamples }}\\necho \\\"Loading examples...\\\"\\nsuperset load_examples\\n{{- end }}\\nif [ -f \\\"{{ .Values.extraConfigMountPath }}/import_datasources.yaml\\\" ]; then\\n  echo \\\"Importing database connections.... \\\"\\n  superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml\\nfi\",\"jobAnnotations\":{\"helm.sh/hook\":\"post-install,post-upgrade\",\"helm.sh/hook-delete-policy\":\"before-hook-creation\"},\"loadExamples\":false,\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"resources\":{},\"tolerations\":[],\"topologySpreadConstraints\":[]},\"initImage\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"tech4dev/superset\",\"tag\":\"atecf-custom-v2-4.1.1\"},\"nameOverride\":\"clientb\",\"nodeSelector\":{},\"postgresql\":{\"auth\":{\"database\":\"superset\",\"existingSecret\":null,\"password\":\"superset\",\"username\":\"superset\"},\"enabled\":false,\"image\":{\"tag\":\"14.17.0-debian-12-r3\"},\"primary\":{\"persistence\":{\"accessModes\":[\"ReadWriteOnce\"],\"enabled\":true,\"storageClass\":\"gp3\"},\"service\":{\"ports\":{\"postgresql\":\"5432\"}}}},\"priorityClassName\":null,\"redis\":{\"architecture\":\"standalone\",\"auth\":{\"enabled\":false,\"existingSecret\":\"\",\"existingSecretKey\":\"\",\"password\":\"superset\"},\"enabled\":true,\"master\":{\"persistence\":{\"accessModes\":[\"ReadWriteOnce\"],\"enabled\":false}}},\"resources\":{},\"runAsUser\":0,\"secretEnv\":{\"create\":false},\"service\":{\"annotations\":{},\"loadBalancerIP\":null,\"nodePort\":{\"http\":\"nil\"},\"port\":8088,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"create\":false},\"serviceAccountName\":null,\"supersetCeleryBeat\":{\"affinity\":{},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app beat --pidfile /tmp/celerybeat.pid --schedule /tmp/celerybeat-schedule\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"enabled\":false,\"extraContainers\":[],\"forceReload\":false,\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -wait \\\"tcp://$REDIS_HOST:$REDIS_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres-redis\"}],\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"resources\":{},\"topologySpreadConstraints\":[]},\"supersetCeleryFlower\":{\"affinity\":{},\"command\":[\"/bin/sh\",\"-c\",\"celery --app=superset.tasks.celery_app:app flower\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"enabled\":false,\"extraContainers\":[],\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -wait \\\"tcp://$REDIS_HOST:$REDIS_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres-redis\"}],\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/api/workers\",\"port\":\"flower\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/api/workers\",\"port\":\"flower\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicaCount\":1,\"resources\":{},\"service\":{\"annotations\":{},\"loadBalancerIP\":null,\"nodePort\":{\"http\":\"nil\"},\"port\":5555,\"type\":\"ClusterIP\"},\"startupProbe\":{\"failureThreshold\":60,\"httpGet\":{\"path\":\"/api/workers\",\"port\":\"flower\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"topologySpreadConstraints\":[]},\"supersetNode\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":100,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"deploymentLabels\":{},\"env\":{},\"extraContainers\":[],\"forceReload\":false,\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres\"}],\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"http\"},\"initialDelaySeconds\":15,\"periodSeconds\":15,\"successThreshold\":1,\"timeoutSeconds\":1},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"http\"},\"initialDelaySeconds\":15,\"periodSeconds\":15,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":{\"enabled\":true,\"replicaCount\":1},\"resources\":{},\"startupProbe\":{\"failureThreshold\":60,\"httpGet\":{\"path\":\"/health\",\"port\":\"http\"},\"initialDelaySeconds\":15,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"strategy\":{},\"topologySpreadConstraints\":[]},\"supersetWebsockets\":{\"affinity\":{},\"command\":[],\"config\":{\"jwtCookieName\":\"async-token\",\"jwtSecret\":\"CHANGE-ME\",\"logFilename\":\"app.log\",\"logLevel\":\"debug\",\"logToFile\":false,\"port\":8080,\"redis\":{\"db\":0,\"host\":\"127.0.0.1\",\"password\":\"\",\"port\":6379,\"ssl\":false},\"redisStreamPrefix\":\"async-events-\",\"statsd\":{\"globalTags\":[],\"host\":\"127.0.0.1\",\"port\":8125}},\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"enabled\":false,\"extraContainers\":[],\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"oneacrefund/superset-websocket\",\"tag\":\"latest\"},\"ingress\":{\"path\":\"/ws\",\"pathType\":\"Prefix\"},\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"ws\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"ws\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicaCount\":1,\"resources\":{},\"service\":{\"annotations\":{},\"loadBalancerIP\":null,\"nodePort\":{\"http\":\"nil\"},\"port\":8080,\"type\":\"ClusterIP\"},\"startupProbe\":{\"failureThreshold\":60,\"httpGet\":{\"path\":\"/health\",\"port\":\"ws\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"strategy\":{},\"topologySpreadConstraints\":[]},\"supersetWorker\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":100,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"deploymentLabels\":{},\"extraContainers\":[],\"forceReload\":false,\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -wait \\\"tcp://$REDIS_HOST:$REDIS_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres-redis\"}],\"livenessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME\"]},\"failureThreshold\":3,\"initialDelaySeconds\":120,\"periodSeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":60},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"readinessProbe\":{},\"replicas\":{\"enabled\":true,\"replicaCount\":1},\"resources\":{},\"startupProbe\":{},\"strategy\":{},\"topologySpreadConstraints\":[]},\"tolerations\":[],\"topologySpreadConstraints\":[]}",
                "version": "0.14.2"
              }
            ],
            "name": "clientb",
            "namespace": "clientb-superset",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://apache.github.io/superset",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "failed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Default values for superset.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\n\n# A README is automatically generated from this file to document it,\n# using helm-docs (see https://github.com/norwoodj/helm-docs)\n# To update it, install helm-docs and run helm-docs from the root of this chart\n\n# -- Provide a name to override the name of the chart\nnameOverride: clientb # good place to the org/client name\n# -- Provide a name to override the full names of resources\nfullnameOverride: ~\n\n# -- Labels to be added to all resources\nextraLabels: {}\n\n# -- User ID directive. This user must have enough permissions to run the bootstrap script\n# Running containers as root is not recommended in production. Change this to another UID - e.g. 1000 to be more secure\nrunAsUser: 0\n\n# -- Specify rather or not helm should create the secret described in `secret-env.yaml` template\nsecretEnv:\n  # -- Change to false in order to support externally created secret (Binami \"Sealed Secrets\" for Kubernetes or External Secrets Operator)\n  # note: when externally creating the secret, the chart still expects to pull values from a secret with the name of the release defaults to `release-name-superset-env` - full logic located in _helpers.tpl file: `define \"superset.fullname\"`\n  create: false\n\n# -- Specify service account name to be used\nserviceAccountName: ~\nserviceAccount:\n  # -- Create custom service account for Superset. If create: true and serviceAccountName is not provided, `superset.fullname` will be used.\n  create: false\n  annotations: {}\n\n# -- Install additional packages and do any other bootstrap configuration in this script\n# For production clusters it's recommended to build own image with this step done in CI\n# @default -- see `values.yaml`\nbootstrapScript: |\n  #!/bin/bash\n  \n  # Install system-level dependencies\n  apt-get update \u0026\u0026 apt-get install -y \\\n    python3-dev \\\n    default-libmysqlclient-dev \\\n    build-essential \\\n    pkg-config\n  # Install required Python packages\n  pip install \\\n    authlib \\\n    psycopg2-binary \\\n    mysqlclient \\\n  # Create bootstrap file if it doesn't exist\n  if [ ! -f ~/bootstrap ]; then\n    echo \"Running Superset with uid {{ .Values.runAsUser }}\" \u003e ~/bootstrap\n  fi\n# -- The name of the secret which we will use to generate a superset_config.py file\n# Note: this secret must have the key superset_config.py in it and can include other files as well\nconfigFromSecret: '{{ template \"superset.fullname\" . }}-config'\n\n# -- The name of the secret which we will use to populate env vars in deployed pods\n# This can be useful for secret keys, etc.\nenvFromSecret: superset-clientb-env\n# -- This can be a list of templated strings\nenvFromSecrets: []\n\n# -- Extra environment variables that will be passed into pods\nextraEnv: {}\n  # Different gunicorn settings, refer to the gunicorn documentation\n  # https://docs.gunicorn.org/en/stable/settings.html#\n  # These variables are used as Flags at the gunicorn startup\n  # https://github.com/apache/superset/blob/master/docker/run-server.sh#L22\n  # Extend timeout to allow long running queries.\n  # GUNICORN_TIMEOUT: 300\n  # Increase the gunicorn worker amount, can improve performance drastically\n  # See: https://docs.gunicorn.org/en/stable/design.html#how-many-workers\n  # SERVER_WORKER_AMOUNT: 4\n  # WORKER_MAX_REQUESTS: 0\n  # WORKER_MAX_REQUESTS_JITTER: 0\n  # SERVER_THREADS_AMOUNT: 20\n  # GUNICORN_KEEPALIVE: 2\n  # SERVER_LIMIT_REQUEST_LINE: 0\n  # SERVER_LIMIT_REQUEST_FIELD_SIZE: 0\n\n  # OAUTH_HOME_DOMAIN: ..\n  # # If a whitelist is not set, any address that can use your OAuth2 endpoint will be able to login.\n  # #   this includes any random Gmail address if your OAuth2 Web App is set to External.\n  # OAUTH_WHITELIST_REGEX: ...\n\n# -- Extra environment variables in RAW format that will be passed into pods\nextraEnvRaw: []\n\n# -- Extra environment variables to pass as secrets\nextraSecretEnv: []\n  # MAPBOX_API_KEY: ...\n  # # Google API Keys: https://console.cloud.google.com/apis/credentials\n  # GOOGLE_KEY: ...\n  # GOOGLE_SECRET: ...\n  #   # Generate your own secret key for encryption. Use openssl rand -base64 42 to generate a good key\n  #  SUPERSET_SECRET_KEY: 'CHANGE_ME_TO_A_COMPLEX_RANDOM_SECRET'\n\n# -- Extra files to be mounted as ConfigMap on the path specified in `extraConfigMountPath`\nextraConfigs: {}\n  # import_datasources.yaml: |\n  #     databases:\n  #     - allow_file_upload: true\n  #       allow_ctas: true\n  #       allow_cvas: true\n  #       database_name: example-db\n  #       extra: \"{\\r\\n    \\\"metadata_params\\\": {},\\r\\n    \\\"engine_params\\\": {},\\r\\n    \\\"\\\n  #         metadata_cache_timeout\\\": {},\\r\\n    \\\"schemas_allowed_for_file_upload\\\": []\\r\\n\\\n  #         }\"\n  #       sqlalchemy_uri: example://example-db.local\n  #       tables: []\n\n# -- Extra files to be mounted as Secrets on the path specified in `configMountPath`\nextraSecrets: {}\n\nextraVolumes: []\n  # - name: customConfig\n  #   configMap:\n  #     name: '{{ template \"superset.fullname\" . }}-custom-config'\n  # - name: additionalSecret\n  #   secret:\n  #     secretName: my-secret\n  #     defaultMode: 0600\n\nextraVolumeMounts: []\n  # - name: customConfig\n  #   mountPath: /mnt/config\n  #   readOnly: true\n  # - name: additionalSecret:\n  #   mountPath: /mnt/secret\n\n# -- A dictionary of overrides to append at the end of superset_config.py - the name does not matter\n# WARNING: the order is not guaranteed\n# Files can be passed as helm --set-file configOverrides.my-override=my-file.py\nconfigOverrides:\n  # extend_timeout: |\n  #    # Extend timeout to allow long running queries.\n  #    SUPERSET_WEBSERVER_TIMEOUT = ...\n  # enable_oauth: |\n  #   from flask_appbuilder.security.manager import (AUTH_DB, AUTH_OAUTH)\n    \n  #   CSRF_ENABLED = True\n    \n  #   AUTH_TYPE = AUTH_OAUTH\n  #   ENABLE_PROXY_FIX = True\n  #   GOOGLE_CLIENT_ID = os.getenv(\"GOOGLE_CLIENT_ID\")\n  #   GOOGLE_CLIENT_SECRET = os.getenv(\"GOOGLE_CLIENT_SECRET\")\n  #   GOOGLE_WHITELISTED_DOMAIN = os.getenv(\"GOOGLE_WHITELISTED_DOMAIN\")\n  #   # whitelist ourselves so our clients don't need to create accounts for us on their domain\n  #   whitelist = [\"@projecttech4dev.org\"]\n  #   if GOOGLE_WHITELISTED_DOMAIN and GOOGLE_WHITELISTED_DOMAIN != \"projecttech4dev.org\":\n  #       whitelist.append(\"@\" + GOOGLE_WHITELISTED_DOMAIN)\n    \n  #   OAUTH_PROVIDERS = [\n  #     {\n  #       \"name\": \"google\",\n  #       \"whitelist\": whitelist,\n  #       \"token_key\": \"access_token\",  # Name of the token in the response of access_token_url\n  #       \"icon\": \"fa-address-card\",  # Icon for the provider\n  #       \"remote_app\": {\n  #           \"client_id\": GOOGLE_CLIENT_ID,  # Client Id (Identify Superset application)\n  #           \"client_secret\": GOOGLE_CLIENT_SECRET,  # Secret for this Client Id (Identify Superset application)\n  #           \"client_kwargs\": {\"scope\": \"email\"},  # Scope for the Authorization\n  #           \"access_token_method\": \"POST\",  # HTTP Method to call access_token_url\n  #           \"access_token_params\": {  # Additional parameters for calls to access_token_url\n  #               \"client_id\": GOOGLE_CLIENT_ID\n  #           },\n  #           \"access_token_headers\": {  # Additional headers for calls to access_token_url\n  #               \"Authorization\": \"Basic Base64EncodedClientIdAndSecret\"\n  #           },\n  #           \"api_base_url\": \"https://www.googleapis.com/oauth2/v2/'\",\n  #           \"access_token_url\": \"https://oauth2.googleapis.com/token\",\n  #           \"authorize_url\": \"https://accounts.google.com/o/oauth2/auth\",\n  #       }\n  #     }\n  #   ]\n  #   # Map Authlib roles to superset roles\n  #   AUTH_ROLE_ADMIN = 'Admin'\n  #   AUTH_ROLE_PUBLIC = 'Public'\n    \n  #   # Will allow user self registration, allowing to create Flask users from Authorized User\n  #   AUTH_USER_REGISTRATION = True\n    \n  #   # The default user self registration role\n  #   AUTH_USER_REGISTRATION_ROLE = \"Gamma\"\n  secret: |\n    # Generate your own secret key for encryption. Use `openssl rand -base64 42` to generate a good key\n    SECRET_KEY = os.environ.get(\"SUPERSET_SECRET_KEY\").encode('utf-8').strip()\n# -- Same as above but the values are files\nconfigOverridesFiles: {}\n  # extend_timeout: extend_timeout.py\n  # enable_oauth: enable_oauth.py\n\nconfigMountPath: \"/app/pythonpath\"\n\nextraConfigMountPath: \"/app/configs\"\n\nimage:\n  repository: tech4dev/superset\n  tag: atecf-custom-v2-4.1.1\n  pullPolicy: IfNotPresent\n\n# Optional: If you have a separate init container image\ninitImage:\n  repository: tech4dev/superset\n  tag: atecf-custom-v2-4.1.1\n  pullPolicy: IfNotPresent\n\nservice:\n  type: ClusterIP\n  port: 8088\n  annotations: {}\n    # cloud.google.com/load-balancer-type: \"Internal\"\n  loadBalancerIP: ~\n  nodePort:\n    # -- (int)\n    http: nil\n\ningress:\n  enabled: true\n  ingressClassName: nginx\n  annotations:\n    # kubernetes.io/tls-acme: \"true\"\n    ## Extend timeout to allow long running queries.\n    cert-manager.io/cluster-issuer: \"letsencrypt-staging\"\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: \"300\"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: \"300\"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: \"300\"\n    # nginx.ingress.kubernetes.io/server-snippet: |\n    #   if ($host = \"t4dsuperset.dalgo.org\") {\n    #     return 301 https://t4dsuperset.dalgo.org$request_uri;\n    #   }\n  path: /\n  pathType: ImplementationSpecific\n  hosts:\n    - clientb.test.org\n  tls:\n    - hosts:\n        - clientb.test.org\n      secretName: client-tls\n  extraHostsRaw: []\n  #  - secretName: chart-example-tls\n  #    hosts:\n  #      - chart-example.local\n\nresources: {}\n  # We usually recommend not to specify default resources and to leave this as a conscious\n  # choice for the user. This also increases chances charts run on environments with little\n  # resources, such as Minikube. If you do want to specify resources, uncomment the following\n  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n  # The limits below will apply to all Superset components. To set individual resource limitations refer to the pod specific values below.\n  # The pod specific values will overwrite anything that is set here.\n  # limits:\n  #   cpu: 100m\n  #   memory: 128Mi\n  # requests:\n  #   cpu: 100m\n  #   memory: 128Mi\n\n# -- Custom hostAliases for all superset pods\n## https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/\nhostAliases: []\n# - hostnames:\n#   - nodns.my.lan\n#   ip: 18.27.36.45\n\n# Superset node configuration\nsupersetNode:\n  replicas:\n    enabled: true\n    replicaCount: 1\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 100\n    targetCPUUtilizationPercentage: 80\n    # targetMemoryUtilizationPercentage: 80\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetNode pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n\n  # -- Startup command\n  # @default -- See `values.yaml`\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh\"\n  # connections:\n  #   # -- Change in case of bringing your own redis and then also set redis.enabled:false\n  #   redis_host: \"{{ .Release.Name }}-redis-headless\"\n  #   redis_port: \"6379\"\n  #   redis_user: \"\"\n  #   # redis_password: superset\n  #   redis_cache_db: \"1\"\n  #   redis_celery_db: \"0\"\n  #   # Or SSL port is usually 6380\n  #   # Update following for using Redis with SSL\n  #   redis_ssl:\n  #     enabled: false\n  #   #   ssl_cert_reqs: CERT_NONE\n  #   # You need to change below configuration incase bringing own PostgresSQL instance and also set postgresql.enabled:false\n  #   db_host: \"ddp-staging-2.c4hvhyuxrcet.ap-south-1.rds.amazonaws.com\"\n  #   db_port: \"5432\"\n  #   db_user: \"test_superset\"\n  #   db_pass: \"test_superset\"\n  #   db_name: \"test_superset\"\n  env: {}\n  # -- If true, forces deployment to reload on each upgrade\n  forceReload: false\n  # -- Init containers\n  # @default -- a container waiting for postgres\n  initContainers:\n    - name: wait-for-postgres\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -timeout 120s\n\n  # -- Launch additional containers into supersetNode pod\n  extraContainers: []\n  # -- Annotations to be added to supersetNode deployment\n  deploymentAnnotations: {}\n  # -- Labels to be added to supersetNode deployment\n  deploymentLabels: {}\n  # -- Affinity to be added to supersetNode deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetNode deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetNode pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetNode pods\n  podLabels: {}\n  startupProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 15\n    timeoutSeconds: 1\n    failureThreshold: 60\n    periodSeconds: 5\n    successThreshold: 1\n  livenessProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 15\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 15\n    successThreshold: 1\n  readinessProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 15\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 15\n    successThreshold: 1\n  # -- Resource settings for the supersetNode pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  strategy: {}\n    # type: RollingUpdate\n    # rollingUpdate:\n    #   maxSurge: 25%\n    #   maxUnavailable: 25%\n\n# Superset Celery worker configuration\nsupersetWorker:\n  replicas:\n    enabled: true\n    replicaCount: 1\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 100\n    targetCPUUtilizationPercentage: 80\n    # targetMemoryUtilizationPercentage: 80\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetWorker pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  # -- Worker startup command\n  # @default -- a `celery worker` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker\"\n  # -- If true, forces deployment to reload on each upgrade\n  forceReload: false\n  # -- Init container\n  # @default -- a container waiting for postgres and redis\n  initContainers:\n    - name: wait-for-postgres-redis\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -wait \"tcp://$REDIS_HOST:$REDIS_PORT\" -timeout 120s\n  # -- Launch additional containers into supersetWorker pod\n  extraContainers: []\n  # -- Annotations to be added to supersetWorker deployment\n  deploymentAnnotations: {}\n  # -- Labels to be added to supersetWorker deployment\n  deploymentLabels: {}\n  # -- Affinity to be added to supersetWorker deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetWorker deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetWorker pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetWorker pods\n  podLabels: {}\n  # -- Resource settings for the supersetWorker pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  strategy: {}\n    # type: RollingUpdate\n    # rollingUpdate:\n    #   maxSurge: 25%\n    #   maxUnavailable: 25%\n  livenessProbe:\n    exec:\n      # -- Liveness probe command\n      # @default -- a `celery inspect ping` command\n      command:\n        - sh\n        - -c\n        - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME\n    initialDelaySeconds: 120\n    timeoutSeconds: 60\n    failureThreshold: 3\n    periodSeconds: 60\n    successThreshold: 1\n  # -- No startup/readiness probes by default since we don't really care about its startup time (it doesn't serve traffic)\n  startupProbe: {}\n  # -- No startup/readiness probes by default since we don't really care about its startup time (it doesn't serve traffic)\n  readinessProbe: {}\n  # -- Set priorityClassName for supersetWorker pods\n  priorityClassName: ~\n\n# Superset beat configuration (to trigger scheduled jobs like reports)\nsupersetCeleryBeat:\n  # -- This is only required if you intend to use alerts and reports\n  enabled: false\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetCeleryBeat pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  # -- Command\n  # @default -- a `celery beat` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app beat --pidfile /tmp/celerybeat.pid --schedule /tmp/celerybeat-schedule\"\n  # -- If true, forces deployment to reload on each upgrade\n  forceReload: false\n  # -- List of init containers\n  # @default -- a container waiting for postgres\n  initContainers:\n    - name: wait-for-postgres-redis\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -wait \"tcp://$REDIS_HOST:$REDIS_PORT\" -timeout 120s\n  # -- Launch additional containers into supersetCeleryBeat pods\n  extraContainers: []\n  # -- Annotations to be added to supersetCeleryBeat deployment\n  deploymentAnnotations: {}\n  # -- Affinity to be added to supersetCeleryBeat deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetCeleryBeat deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetCeleryBeat pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetCeleryBeat pods\n  podLabels: {}\n  # -- Resource settings for the CeleryBeat pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  # -- Set priorityClassName for CeleryBeat pods\n  priorityClassName: ~\n\nsupersetCeleryFlower:\n  # -- Enables a Celery flower deployment (management UI to monitor celery jobs)\n  # WARNING: on superset 1.x, this requires a Superset image that has `flower\u003c1.0.0` installed (which is NOT the case of the default images)\n  # flower\u003e=1.0.0 requires Celery 5+ which Superset 1.5 does not support\n  enabled: false\n  replicaCount: 1\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetCeleryFlower pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  # -- Command\n  # @default -- a `celery flower` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \"celery --app=superset.tasks.celery_app:app flower\"\n  service:\n    type: ClusterIP\n    annotations: {}\n    loadBalancerIP: ~\n    port: 5555\n    nodePort:\n      # -- (int)\n      http: nil\n  startupProbe:\n    httpGet:\n      path: /api/workers\n      port: flower\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 60\n    periodSeconds: 5\n    successThreshold: 1\n  livenessProbe:\n    httpGet:\n      path: /api/workers\n      port: flower\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  readinessProbe:\n    httpGet:\n      path: /api/workers\n      port: flower\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  # -- List of init containers\n  # @default -- a container waiting for postgres and redis\n  initContainers:\n    - name: wait-for-postgres-redis\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -wait \"tcp://$REDIS_HOST:$REDIS_PORT\" -timeout 120s\n  # -- Launch additional containers into supersetCeleryFlower pods\n  extraContainers: []\n  # -- Annotations to be added to supersetCeleryFlower deployment\n  deploymentAnnotations: {}\n  # -- Affinity to be added to supersetCeleryFlower deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetCeleryFlower deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetCeleryFlower pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetCeleryFlower pods\n  podLabels: {}\n  # -- Resource settings for the CeleryBeat pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  # -- Set priorityClassName for supersetCeleryFlower pods\n  priorityClassName: ~\n\nsupersetWebsockets:\n  # -- This is only required if you intend to use `GLOBAL_ASYNC_QUERIES` in `ws` mode\n  # see https://github.com/apache/superset/blob/master/CONTRIBUTING.md#async-chart-queries\n  enabled: false\n  replicaCount: 1\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetWebsockets pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  ingress:\n    path: /ws\n    pathType: Prefix\n  image:\n    # -- There is no official image (yet), this one is community-supported\n    repository: oneacrefund/superset-websocket\n    tag: latest\n    pullPolicy: IfNotPresent\n  # -- The config.json to pass to the server, see https://github.com/apache/superset/tree/master/superset-websocket\n  # Note that the configuration can also read from environment variables (which will have priority), see https://github.com/apache/superset/blob/master/superset-websocket/src/config.ts for a list of supported variables\n  # @default -- see `values.yaml`\n  config:\n    {\n      \"port\": 8080,\n      \"logLevel\": \"debug\",\n      \"logToFile\": false,\n      \"logFilename\": \"app.log\",\n      \"statsd\": { \"host\": \"127.0.0.1\", \"port\": 8125, \"globalTags\": [] },\n      \"redis\":\n        {\n          \"port\": 6379,\n          \"host\": \"127.0.0.1\",\n          \"password\": \"\",\n          \"db\": 0,\n          \"ssl\": false,\n        },\n      \"redisStreamPrefix\": \"async-events-\",\n      \"jwtSecret\": \"CHANGE-ME\",\n      \"jwtCookieName\": \"async-token\",\n    }\n  service:\n    type: ClusterIP\n    annotations: {}\n    loadBalancerIP: ~\n    port: 8080\n    nodePort:\n      # -- (int)\n      http: nil\n  command: []\n  resources: {}\n  # -- Launch additional containers into supersetWebsockets pods\n  extraContainers: []\n  deploymentAnnotations: {}\n  # -- Affinity to be added to supersetWebsockets deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetWebsockets deployments\n  topologySpreadConstraints: []\n  podAnnotations: {}\n  podLabels: {}\n  strategy: {}\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  startupProbe:\n    httpGet:\n      path: /health\n      port: ws\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 60\n    periodSeconds: 5\n    successThreshold: 1\n  livenessProbe:\n    httpGet:\n      path: /health\n      port: ws\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  readinessProbe:\n    httpGet:\n      path: /health\n      port: ws\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  # -- Set priorityClassName for supersetWebsockets pods\n  priorityClassName: ~\n\ninit:\n  # Configure resources\n  # Warning: fab command consumes a lot of ram and can\n  # cause the process to be killed due to OOM if it exceeds limit\n  # Make sure you are giving a strong password for the admin user creation( else make sure you are changing after setup)\n  # Also change the admin email to your own custom email.\n  resources: {}\n    # limits:\n    #   cpu:\n    #   memory:\n    # requests:\n    #   cpu:\n    #   memory:\n  # -- Command\n  # @default -- a `superset_init.sh` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh\"\n  enabled: true\n  jobAnnotations:\n    \"helm.sh/hook\": post-install,post-upgrade\n    \"helm.sh/hook-delete-policy\": \"before-hook-creation\"\n  loadExamples: false\n  createAdmin: true\n  adminUser:\n    username: admin\n    firstname: Superset\n    lastname: Admin\n    email: admin@superset.com\n    password: admin\n  # -- List of initContainers\n  # @default -- a container waiting for postgres\n  initContainers:\n    - name: wait-for-postgres\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -timeout 120s\n  # -- A Superset init script\n  # @default -- a script to create admin user and initialize roles\n  initscript: |-\n    #!/bin/sh\n    set -eu\n    echo \"Upgrading DB schema...\"\n    superset db upgrade\n    echo \"Initializing roles...\"\n    superset init\n    {{ if .Values.init.createAdmin }}\n    echo \"Creating admin user...\"\n    superset fab create-admin \\\n                    --username {{ .Values.init.adminUser.username }} \\\n                    --firstname {{ .Values.init.adminUser.firstname }} \\\n                    --lastname {{ .Values.init.adminUser.lastname }} \\\n                    --email {{ .Values.init.adminUser.email }} \\\n                    --password {{ .Values.init.adminUser.password }} \\\n                    || true\n    {{- end }}\n    {{ if .Values.init.loadExamples }}\n    echo \"Loading examples...\"\n    superset load_examples\n    {{- end }}\n    if [ -f \"{{ .Values.extraConfigMountPath }}/import_datasources.yaml\" ]; then\n      echo \"Importing database connections.... \"\n      superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml\n    fi\n  # -- Launch additional containers into init job pod\n  extraContainers: []\n  ## Annotations to be added to init job pods\n  podAnnotations: {}\n  # Labels to be added to init job pods\n  podLabels: {}\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  ## Tolerations to be added to init job pods\n  tolerations: []\n  ## Affinity to be added to init job pods\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to init job\n  topologySpreadConstraints: []\n  # -- Set priorityClassName for init job pods\n  priorityClassName: ~\n\n# -- Configuration values for the postgresql dependency.\n# ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql\n# @default -- see `values.yaml`\npostgresql:\n  ##\n  ## Use the PostgreSQL chart dependency.\n  ## Set to false if bringing your own PostgreSQL.\n  enabled: false\n\n  ## Authentication parameters\n  auth:\n    ## The name of an existing secret that contains the postgres password.\n    existingSecret:\n    ## PostgreSQL name for a custom user to create\n    username: superset\n    ## PostgreSQL password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided\n    password: superset\n    ## PostgreSQL name for a custom database to create\n    database: superset\n\n  image:\n    tag: \"14.17.0-debian-12-r3\"\n\n  ## PostgreSQL Primary parameters\n  primary:\n    ##\n    ## Persistent Volume Storage configuration.\n    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes\n    persistence:\n      ##\n      ## Enable PostgreSQL persistence using Persistent Volume Claims.\n      enabled: true\n      ##\n      # Persistent class\n      storageClass: gp3\n      ##\n      ## Access modes:\n      accessModes:\n        - ReadWriteOnce\n    ## PostgreSQL port\n    service:\n      ports:\n        postgresql: \"5432\"\n\n# -- Configuration values for the Redis dependency.\n# ref: https://github.com/bitnami/charts/blob/master/bitnami/redis\n# More documentation can be found here: https://artifacthub.io/packages/helm/bitnami/redis\n# @default -- see `values.yaml`\nredis:\n  ##\n  ## Use the redis chart dependency.\n  ##\n  ## If you are bringing your own redis, you can set the host in supersetNode.connections.redis_host\n  ##\n  ## Set to false if bringing your own redis.\n  enabled: true\n  ##\n  ## Set architecture to standalone/replication\n  architecture: standalone\n  ##\n  ## Auth configuration:\n  ##\n  auth:\n    ## Enable password authentication\n    enabled: false\n    ## The name of an existing secret that contains the redis password.\n    existingSecret: \"\"\n    ## Name of the key containing the secret.\n    existingSecretKey: \"\"\n    ## Redis password\n    password: superset\n  ##\n  ## Master configuration\n  ##\n  master:\n    ##\n    ## Image configuration\n    # image:\n    ##\n    ## docker registry secret names (list)\n    # pullSecrets: nil\n    ##\n    ## Configure persistence\n    persistence:\n      ##\n      ## Use a PVC to persist data.\n      enabled: false\n      ##\n      ## Persistent class\n      # storageClass: classname\n      ##\n      ## Access mode:\n      accessModes:\n        - ReadWriteOnce\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\n# -- TopologySpreadConstrains to be added to all deployments\ntopologySpreadConstraints: []\n\n# -- Set priorityClassName for superset pods\npriorityClassName: ~"
            ],
            "verify": false,
            "version": "0.14.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        },
        {
          "index_key": "t4dsuperset",
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "superset",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "t4dsuperset",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "4.1.2",
                "chart": "superset",
                "first_deployed": 1747565340,
                "last_deployed": 1747565340,
                "name": "t4dsuperset",
                "namespace": "t4dsuperset-superset",
                "notes": "\n\n1. Get the application URL by running these commands:\n  https://t4dsuperset.dalgo.org/\n\nCHART NAME: redis\nCHART VERSION: 17.9.4\nAPP VERSION: 7.0.10\n\n** Please be patient while the chart is being deployed **\n\nRedis\u0026reg; can be accessed via port 6379 on the following DNS name from within your cluster:\n\n    t4dsuperset-redis-master.t4dsuperset-superset.svc.cluster.local\n\n\n\nTo connect to your Redis\u0026reg; server:\n\n1. Run a Redis\u0026reg; pod that you can use as a client:\n\n   kubectl run --namespace t4dsuperset-superset redis-client --restart='Never'  --image docker.io/bitnami/redis:7.0.10-debian-11-r4 --command -- sleep infinity\n\n   Use the following command to attach to the pod:\n\n   kubectl exec --tty -i redis-client \\\n   --namespace t4dsuperset-superset -- bash\n\n2. Connect using the Redis\u0026reg; CLI:\n   redis-cli -h t4dsuperset-redis-master\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace t4dsuperset-superset svc/t4dsuperset-redis-master 6379:6379 \u0026\n    redis-cli -h 127.0.0.1 -p 6379\n",
                "revision": 1,
                "values": "{\"affinity\":{},\"bootstrapScript\":\"#!/bin/bash\\n\\n# Install system-level dependencies\\napt-get update \\u0026\\u0026 apt-get install -y \\\\\\n  python3-dev \\\\\\n  default-libmysqlclient-dev \\\\\\n  build-essential \\\\\\n  pkg-config\\n# Install required Python packages\\npip install \\\\\\n  authlib \\\\\\n  psycopg2-binary \\\\\\n  mysqlclient \\\\\\n# Create bootstrap file if it doesn't exist\\nif [ ! -f ~/bootstrap ]; then\\n  echo \\\"Running Superset with uid {{ .Values.runAsUser }}\\\" \\u003e ~/bootstrap\\nfi\\n\",\"configFromSecret\":\"{{ template \\\"superset.fullname\\\" . }}-config\",\"configMountPath\":\"/app/pythonpath\",\"configOverrides\":{\"secret\":\"# Generate your own secret key for encryption. Use `openssl rand -base64 42` to generate a good key\\nSECRET_KEY = os.environ.get(\\\"SUPERSET_SECRET_KEY\\\").encode('utf-8').strip()\\n\"},\"configOverridesFiles\":{},\"envFromSecret\":\"superset-t4dsuperset-env\",\"envFromSecrets\":[],\"extraConfigMountPath\":\"/app/configs\",\"extraConfigs\":{},\"extraEnv\":{},\"extraEnvRaw\":[],\"extraLabels\":{},\"extraSecretEnv\":[],\"extraSecrets\":{},\"extraVolumeMounts\":[],\"extraVolumes\":[],\"fullnameOverride\":null,\"hostAliases\":[],\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"apachesuperset.docker.scarf.sh/apache/superset\",\"tag\":null},\"imagePullSecrets\":[],\"ingress\":{\"annotations\":{\"cert-manager.io/cluster-issuer\":\"letsencrypt-staging\",\"nginx.ingress.kubernetes.io/proxy-connect-timeout\":\"300\",\"nginx.ingress.kubernetes.io/proxy-read-timeout\":\"300\",\"nginx.ingress.kubernetes.io/proxy-send-timeout\":\"300\"},\"enabled\":true,\"extraHostsRaw\":[],\"hosts\":[\"t4dsuperset.dalgo.org\"],\"ingressClassName\":\"nginx\",\"path\":\"/\",\"pathType\":\"ImplementationSpecific\",\"tls\":[{\"hosts\":[\"t4dsuperset.dalgo.org\"],\"secretName\":\"t4dsuperset-tls\"}]},\"init\":{\"adminUser\":{\"email\":\"admin@superset.com\",\"firstname\":\"Superset\",\"lastname\":\"Admin\",\"password\":\"admin\",\"username\":\"admin\"},\"affinity\":{},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh\"],\"containerSecurityContext\":{},\"createAdmin\":true,\"enabled\":true,\"extraContainers\":[],\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres\"}],\"initscript\":\"#!/bin/sh\\nset -eu\\necho \\\"Upgrading DB schema...\\\"\\nsuperset db upgrade\\necho \\\"Initializing roles...\\\"\\nsuperset init\\n{{ if .Values.init.createAdmin }}\\necho \\\"Creating admin user...\\\"\\nsuperset fab create-admin \\\\\\n                --username {{ .Values.init.adminUser.username }} \\\\\\n                --firstname {{ .Values.init.adminUser.firstname }} \\\\\\n                --lastname {{ .Values.init.adminUser.lastname }} \\\\\\n                --email {{ .Values.init.adminUser.email }} \\\\\\n                --password {{ .Values.init.adminUser.password }} \\\\\\n                || true\\n{{- end }}\\n{{ if .Values.init.loadExamples }}\\necho \\\"Loading examples...\\\"\\nsuperset load_examples\\n{{- end }}\\nif [ -f \\\"{{ .Values.extraConfigMountPath }}/import_datasources.yaml\\\" ]; then\\n  echo \\\"Importing database connections.... \\\"\\n  superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml\\nfi\",\"jobAnnotations\":{\"helm.sh/hook\":\"post-install,post-upgrade\",\"helm.sh/hook-delete-policy\":\"before-hook-creation\"},\"loadExamples\":false,\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"resources\":{},\"tolerations\":[],\"topologySpreadConstraints\":[]},\"initImage\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"apache/superset\",\"tag\":\"dockerize\"},\"nameOverride\":\"t4dsuperset\",\"nodeSelector\":{},\"postgresql\":{\"auth\":{\"database\":\"superset\",\"existingSecret\":null,\"password\":\"superset\",\"username\":\"superset\"},\"enabled\":false,\"image\":{\"tag\":\"14.17.0-debian-12-r3\"},\"primary\":{\"persistence\":{\"accessModes\":[\"ReadWriteOnce\"],\"enabled\":true,\"storageClass\":\"gp3\"},\"service\":{\"ports\":{\"postgresql\":\"5432\"}}}},\"priorityClassName\":null,\"redis\":{\"architecture\":\"standalone\",\"auth\":{\"enabled\":false,\"existingSecret\":\"\",\"existingSecretKey\":\"\",\"password\":\"superset\"},\"enabled\":true,\"master\":{\"persistence\":{\"accessModes\":[\"ReadWriteOnce\"],\"enabled\":false}}},\"resources\":{},\"runAsUser\":0,\"secretEnv\":{\"create\":false},\"service\":{\"annotations\":{},\"loadBalancerIP\":null,\"nodePort\":{\"http\":\"nil\"},\"port\":8088,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"create\":false},\"serviceAccountName\":null,\"supersetCeleryBeat\":{\"affinity\":{},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app beat --pidfile /tmp/celerybeat.pid --schedule /tmp/celerybeat-schedule\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"enabled\":false,\"extraContainers\":[],\"forceReload\":false,\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -wait \\\"tcp://$REDIS_HOST:$REDIS_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres-redis\"}],\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"resources\":{},\"topologySpreadConstraints\":[]},\"supersetCeleryFlower\":{\"affinity\":{},\"command\":[\"/bin/sh\",\"-c\",\"celery --app=superset.tasks.celery_app:app flower\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"enabled\":false,\"extraContainers\":[],\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -wait \\\"tcp://$REDIS_HOST:$REDIS_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres-redis\"}],\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/api/workers\",\"port\":\"flower\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/api/workers\",\"port\":\"flower\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicaCount\":1,\"resources\":{},\"service\":{\"annotations\":{},\"loadBalancerIP\":null,\"nodePort\":{\"http\":\"nil\"},\"port\":5555,\"type\":\"ClusterIP\"},\"startupProbe\":{\"failureThreshold\":60,\"httpGet\":{\"path\":\"/api/workers\",\"port\":\"flower\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"topologySpreadConstraints\":[]},\"supersetNode\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":100,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"deploymentLabels\":{},\"env\":{},\"extraContainers\":[],\"forceReload\":false,\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres\"}],\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"http\"},\"initialDelaySeconds\":15,\"periodSeconds\":15,\"successThreshold\":1,\"timeoutSeconds\":1},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"http\"},\"initialDelaySeconds\":15,\"periodSeconds\":15,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":{\"enabled\":true,\"replicaCount\":1},\"resources\":{},\"startupProbe\":{\"failureThreshold\":60,\"httpGet\":{\"path\":\"/health\",\"port\":\"http\"},\"initialDelaySeconds\":15,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"strategy\":{},\"topologySpreadConstraints\":[]},\"supersetWebsockets\":{\"affinity\":{},\"command\":[],\"config\":{\"jwtCookieName\":\"async-token\",\"jwtSecret\":\"CHANGE-ME\",\"logFilename\":\"app.log\",\"logLevel\":\"debug\",\"logToFile\":false,\"port\":8080,\"redis\":{\"db\":0,\"host\":\"127.0.0.1\",\"password\":\"\",\"port\":6379,\"ssl\":false},\"redisStreamPrefix\":\"async-events-\",\"statsd\":{\"globalTags\":[],\"host\":\"127.0.0.1\",\"port\":8125}},\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"enabled\":false,\"extraContainers\":[],\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"oneacrefund/superset-websocket\",\"tag\":\"latest\"},\"ingress\":{\"path\":\"/ws\",\"pathType\":\"Prefix\"},\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"ws\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/health\",\"port\":\"ws\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicaCount\":1,\"resources\":{},\"service\":{\"annotations\":{},\"loadBalancerIP\":null,\"nodePort\":{\"http\":\"nil\"},\"port\":8080,\"type\":\"ClusterIP\"},\"startupProbe\":{\"failureThreshold\":60,\"httpGet\":{\"path\":\"/health\",\"port\":\"ws\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"strategy\":{},\"topologySpreadConstraints\":[]},\"supersetWorker\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":100,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80},\"command\":[\"/bin/sh\",\"-c\",\". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker\"],\"containerSecurityContext\":{},\"deploymentAnnotations\":{},\"deploymentLabels\":{},\"extraContainers\":[],\"forceReload\":false,\"initContainers\":[{\"command\":[\"/bin/sh\",\"-c\",\"dockerize -wait \\\"tcp://$DB_HOST:$DB_PORT\\\" -wait \\\"tcp://$REDIS_HOST:$REDIS_PORT\\\" -timeout 120s\"],\"envFrom\":[{\"secretRef\":{\"name\":\"{{ tpl .Values.envFromSecret . }}\"}}],\"image\":\"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\",\"imagePullPolicy\":\"{{ .Values.initImage.pullPolicy }}\",\"name\":\"wait-for-postgres-redis\"}],\"livenessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME\"]},\"failureThreshold\":3,\"initialDelaySeconds\":120,\"periodSeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":60},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":null,\"readinessProbe\":{},\"replicas\":{\"enabled\":true,\"replicaCount\":1},\"resources\":{},\"startupProbe\":{},\"strategy\":{},\"topologySpreadConstraints\":[]},\"tolerations\":[],\"topologySpreadConstraints\":[]}",
                "version": "0.14.2"
              }
            ],
            "name": "t4dsuperset",
            "namespace": "t4dsuperset-superset",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://apache.github.io/superset",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Default values for superset.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\n\n# A README is automatically generated from this file to document it,\n# using helm-docs (see https://github.com/norwoodj/helm-docs)\n# To update it, install helm-docs and run helm-docs from the root of this chart\n\n# -- Provide a name to override the name of the chart\nnameOverride: t4dsuperset # good place to the org/client name\n# -- Provide a name to override the full names of resources\nfullnameOverride: ~\n\n# -- Labels to be added to all resources\nextraLabels: {}\n\n# -- User ID directive. This user must have enough permissions to run the bootstrap script\n# Running containers as root is not recommended in production. Change this to another UID - e.g. 1000 to be more secure\nrunAsUser: 0\n\n# -- Specify rather or not helm should create the secret described in `secret-env.yaml` template\nsecretEnv:\n  # -- Change to false in order to support externally created secret (Binami \"Sealed Secrets\" for Kubernetes or External Secrets Operator)\n  # note: when externally creating the secret, the chart still expects to pull values from a secret with the name of the release defaults to `release-name-superset-env` - full logic located in _helpers.tpl file: `define \"superset.fullname\"`\n  create: false\n\n# -- Specify service account name to be used\nserviceAccountName: ~\nserviceAccount:\n  # -- Create custom service account for Superset. If create: true and serviceAccountName is not provided, `superset.fullname` will be used.\n  create: false\n  annotations: {}\n\n# -- Install additional packages and do any other bootstrap configuration in this script\n# For production clusters it's recommended to build own image with this step done in CI\n# @default -- see `values.yaml`\nbootstrapScript: |\n  #!/bin/bash\n  \n  # Install system-level dependencies\n  apt-get update \u0026\u0026 apt-get install -y \\\n    python3-dev \\\n    default-libmysqlclient-dev \\\n    build-essential \\\n    pkg-config\n  # Install required Python packages\n  pip install \\\n    authlib \\\n    psycopg2-binary \\\n    mysqlclient \\\n  # Create bootstrap file if it doesn't exist\n  if [ ! -f ~/bootstrap ]; then\n    echo \"Running Superset with uid {{ .Values.runAsUser }}\" \u003e ~/bootstrap\n  fi\n# -- The name of the secret which we will use to generate a superset_config.py file\n# Note: this secret must have the key superset_config.py in it and can include other files as well\nconfigFromSecret: '{{ template \"superset.fullname\" . }}-config'\n\n# -- The name of the secret which we will use to populate env vars in deployed pods\n# This can be useful for secret keys, etc.\nenvFromSecret: superset-t4dsuperset-env\n# -- This can be a list of templated strings\nenvFromSecrets: []\n\n# -- Extra environment variables that will be passed into pods\nextraEnv: {}\n  # Different gunicorn settings, refer to the gunicorn documentation\n  # https://docs.gunicorn.org/en/stable/settings.html#\n  # These variables are used as Flags at the gunicorn startup\n  # https://github.com/apache/superset/blob/master/docker/run-server.sh#L22\n  # Extend timeout to allow long running queries.\n  # GUNICORN_TIMEOUT: 300\n  # Increase the gunicorn worker amount, can improve performance drastically\n  # See: https://docs.gunicorn.org/en/stable/design.html#how-many-workers\n  # SERVER_WORKER_AMOUNT: 4\n  # WORKER_MAX_REQUESTS: 0\n  # WORKER_MAX_REQUESTS_JITTER: 0\n  # SERVER_THREADS_AMOUNT: 20\n  # GUNICORN_KEEPALIVE: 2\n  # SERVER_LIMIT_REQUEST_LINE: 0\n  # SERVER_LIMIT_REQUEST_FIELD_SIZE: 0\n\n  # OAUTH_HOME_DOMAIN: ..\n  # # If a whitelist is not set, any address that can use your OAuth2 endpoint will be able to login.\n  # #   this includes any random Gmail address if your OAuth2 Web App is set to External.\n  # OAUTH_WHITELIST_REGEX: ...\n\n# -- Extra environment variables in RAW format that will be passed into pods\nextraEnvRaw: []\n\n# -- Extra environment variables to pass as secrets\nextraSecretEnv: []\n  # MAPBOX_API_KEY: ...\n  # # Google API Keys: https://console.cloud.google.com/apis/credentials\n  # GOOGLE_KEY: ...\n  # GOOGLE_SECRET: ...\n  #   # Generate your own secret key for encryption. Use openssl rand -base64 42 to generate a good key\n  #  SUPERSET_SECRET_KEY: 'CHANGE_ME_TO_A_COMPLEX_RANDOM_SECRET'\n\n# -- Extra files to be mounted as ConfigMap on the path specified in `extraConfigMountPath`\nextraConfigs: {}\n  # import_datasources.yaml: |\n  #     databases:\n  #     - allow_file_upload: true\n  #       allow_ctas: true\n  #       allow_cvas: true\n  #       database_name: example-db\n  #       extra: \"{\\r\\n    \\\"metadata_params\\\": {},\\r\\n    \\\"engine_params\\\": {},\\r\\n    \\\"\\\n  #         metadata_cache_timeout\\\": {},\\r\\n    \\\"schemas_allowed_for_file_upload\\\": []\\r\\n\\\n  #         }\"\n  #       sqlalchemy_uri: example://example-db.local\n  #       tables: []\n\n# -- Extra files to be mounted as Secrets on the path specified in `configMountPath`\nextraSecrets: {}\n\nextraVolumes: []\n  # - name: customConfig\n  #   configMap:\n  #     name: '{{ template \"superset.fullname\" . }}-custom-config'\n  # - name: additionalSecret\n  #   secret:\n  #     secretName: my-secret\n  #     defaultMode: 0600\n\nextraVolumeMounts: []\n  # - name: customConfig\n  #   mountPath: /mnt/config\n  #   readOnly: true\n  # - name: additionalSecret:\n  #   mountPath: /mnt/secret\n\n# -- A dictionary of overrides to append at the end of superset_config.py - the name does not matter\n# WARNING: the order is not guaranteed\n# Files can be passed as helm --set-file configOverrides.my-override=my-file.py\nconfigOverrides:\n  # extend_timeout: |\n  #    # Extend timeout to allow long running queries.\n  #    SUPERSET_WEBSERVER_TIMEOUT = ...\n  # enable_oauth: |\n  #   from flask_appbuilder.security.manager import (AUTH_DB, AUTH_OAUTH)\n    \n  #   CSRF_ENABLED = True\n    \n  #   AUTH_TYPE = AUTH_OAUTH\n  #   ENABLE_PROXY_FIX = True\n  #   GOOGLE_CLIENT_ID = os.getenv(\"GOOGLE_CLIENT_ID\")\n  #   GOOGLE_CLIENT_SECRET = os.getenv(\"GOOGLE_CLIENT_SECRET\")\n  #   GOOGLE_WHITELISTED_DOMAIN = os.getenv(\"GOOGLE_WHITELISTED_DOMAIN\")\n  #   # whitelist ourselves so our clients don't need to create accounts for us on their domain\n  #   whitelist = [\"@projecttech4dev.org\"]\n  #   if GOOGLE_WHITELISTED_DOMAIN and GOOGLE_WHITELISTED_DOMAIN != \"projecttech4dev.org\":\n  #       whitelist.append(\"@\" + GOOGLE_WHITELISTED_DOMAIN)\n    \n  #   OAUTH_PROVIDERS = [\n  #     {\n  #       \"name\": \"google\",\n  #       \"whitelist\": whitelist,\n  #       \"token_key\": \"access_token\",  # Name of the token in the response of access_token_url\n  #       \"icon\": \"fa-address-card\",  # Icon for the provider\n  #       \"remote_app\": {\n  #           \"client_id\": GOOGLE_CLIENT_ID,  # Client Id (Identify Superset application)\n  #           \"client_secret\": GOOGLE_CLIENT_SECRET,  # Secret for this Client Id (Identify Superset application)\n  #           \"client_kwargs\": {\"scope\": \"email\"},  # Scope for the Authorization\n  #           \"access_token_method\": \"POST\",  # HTTP Method to call access_token_url\n  #           \"access_token_params\": {  # Additional parameters for calls to access_token_url\n  #               \"client_id\": GOOGLE_CLIENT_ID\n  #           },\n  #           \"access_token_headers\": {  # Additional headers for calls to access_token_url\n  #               \"Authorization\": \"Basic Base64EncodedClientIdAndSecret\"\n  #           },\n  #           \"api_base_url\": \"https://www.googleapis.com/oauth2/v2/'\",\n  #           \"access_token_url\": \"https://oauth2.googleapis.com/token\",\n  #           \"authorize_url\": \"https://accounts.google.com/o/oauth2/auth\",\n  #       }\n  #     }\n  #   ]\n  #   # Map Authlib roles to superset roles\n  #   AUTH_ROLE_ADMIN = 'Admin'\n  #   AUTH_ROLE_PUBLIC = 'Public'\n    \n  #   # Will allow user self registration, allowing to create Flask users from Authorized User\n  #   AUTH_USER_REGISTRATION = True\n    \n  #   # The default user self registration role\n  #   AUTH_USER_REGISTRATION_ROLE = \"Gamma\"\n  secret: |\n    # Generate your own secret key for encryption. Use `openssl rand -base64 42` to generate a good key\n    SECRET_KEY = os.environ.get(\"SUPERSET_SECRET_KEY\").encode('utf-8').strip()\n# -- Same as above but the values are files\nconfigOverridesFiles: {}\n  # extend_timeout: extend_timeout.py\n  # enable_oauth: enable_oauth.py\n\nconfigMountPath: \"/app/pythonpath\"\n\nextraConfigMountPath: \"/app/configs\"\n\nimage:\n  repository: apachesuperset.docker.scarf.sh/apache/superset\n  tag: ~\n  pullPolicy: IfNotPresent\n\nimagePullSecrets: []\n\ninitImage:\n  repository: apache/superset\n  tag: dockerize\n  pullPolicy: IfNotPresent\n\nservice:\n  type: ClusterIP\n  port: 8088\n  annotations: {}\n    # cloud.google.com/load-balancer-type: \"Internal\"\n  loadBalancerIP: ~\n  nodePort:\n    # -- (int)\n    http: nil\n\ningress:\n  enabled: true\n  ingressClassName: nginx\n  annotations:\n    # kubernetes.io/tls-acme: \"true\"\n    ## Extend timeout to allow long running queries.\n    cert-manager.io/cluster-issuer: \"letsencrypt-staging\"\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: \"300\"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: \"300\"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: \"300\"\n    # nginx.ingress.kubernetes.io/server-snippet: |\n    #   if ($host = \"t4dsuperset.dalgo.org\") {\n    #     return 301 https://t4dsuperset.dalgo.org$request_uri;\n    #   }\n  path: /\n  pathType: ImplementationSpecific\n  hosts:\n    - t4dsuperset.dalgo.org\n  tls:\n    - hosts:\n        - t4dsuperset.dalgo.org\n      secretName: t4dsuperset-tls\n  extraHostsRaw: []\n  #  - secretName: chart-example-tls\n  #    hosts:\n  #      - chart-example.local\n\nresources: {}\n  # We usually recommend not to specify default resources and to leave this as a conscious\n  # choice for the user. This also increases chances charts run on environments with little\n  # resources, such as Minikube. If you do want to specify resources, uncomment the following\n  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n  # The limits below will apply to all Superset components. To set individual resource limitations refer to the pod specific values below.\n  # The pod specific values will overwrite anything that is set here.\n  # limits:\n  #   cpu: 100m\n  #   memory: 128Mi\n  # requests:\n  #   cpu: 100m\n  #   memory: 128Mi\n\n# -- Custom hostAliases for all superset pods\n## https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/\nhostAliases: []\n# - hostnames:\n#   - nodns.my.lan\n#   ip: 18.27.36.45\n\n# Superset node configuration\nsupersetNode:\n  replicas:\n    enabled: true\n    replicaCount: 1\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 100\n    targetCPUUtilizationPercentage: 80\n    # targetMemoryUtilizationPercentage: 80\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetNode pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n\n  # -- Startup command\n  # @default -- See `values.yaml`\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh\"\n  # connections:\n  #   # -- Change in case of bringing your own redis and then also set redis.enabled:false\n  #   redis_host: \"{{ .Release.Name }}-redis-headless\"\n  #   redis_port: \"6379\"\n  #   redis_user: \"\"\n  #   # redis_password: superset\n  #   redis_cache_db: \"1\"\n  #   redis_celery_db: \"0\"\n  #   # Or SSL port is usually 6380\n  #   # Update following for using Redis with SSL\n  #   redis_ssl:\n  #     enabled: false\n  #   #   ssl_cert_reqs: CERT_NONE\n  #   # You need to change below configuration incase bringing own PostgresSQL instance and also set postgresql.enabled:false\n  #   db_host: \"ddp-staging-2.c4hvhyuxrcet.ap-south-1.rds.amazonaws.com\"\n  #   db_port: \"5432\"\n  #   db_user: \"test_superset\"\n  #   db_pass: \"test_superset\"\n  #   db_name: \"test_superset\"\n  env: {}\n  # -- If true, forces deployment to reload on each upgrade\n  forceReload: false\n  # -- Init containers\n  # @default -- a container waiting for postgres\n  initContainers:\n    - name: wait-for-postgres\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -timeout 120s\n\n  # -- Launch additional containers into supersetNode pod\n  extraContainers: []\n  # -- Annotations to be added to supersetNode deployment\n  deploymentAnnotations: {}\n  # -- Labels to be added to supersetNode deployment\n  deploymentLabels: {}\n  # -- Affinity to be added to supersetNode deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetNode deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetNode pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetNode pods\n  podLabels: {}\n  startupProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 15\n    timeoutSeconds: 1\n    failureThreshold: 60\n    periodSeconds: 5\n    successThreshold: 1\n  livenessProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 15\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 15\n    successThreshold: 1\n  readinessProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 15\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 15\n    successThreshold: 1\n  # -- Resource settings for the supersetNode pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  strategy: {}\n    # type: RollingUpdate\n    # rollingUpdate:\n    #   maxSurge: 25%\n    #   maxUnavailable: 25%\n\n# Superset Celery worker configuration\nsupersetWorker:\n  replicas:\n    enabled: true\n    replicaCount: 1\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 100\n    targetCPUUtilizationPercentage: 80\n    # targetMemoryUtilizationPercentage: 80\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetWorker pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  # -- Worker startup command\n  # @default -- a `celery worker` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker\"\n  # -- If true, forces deployment to reload on each upgrade\n  forceReload: false\n  # -- Init container\n  # @default -- a container waiting for postgres and redis\n  initContainers:\n    - name: wait-for-postgres-redis\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -wait \"tcp://$REDIS_HOST:$REDIS_PORT\" -timeout 120s\n  # -- Launch additional containers into supersetWorker pod\n  extraContainers: []\n  # -- Annotations to be added to supersetWorker deployment\n  deploymentAnnotations: {}\n  # -- Labels to be added to supersetWorker deployment\n  deploymentLabels: {}\n  # -- Affinity to be added to supersetWorker deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetWorker deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetWorker pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetWorker pods\n  podLabels: {}\n  # -- Resource settings for the supersetWorker pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  strategy: {}\n    # type: RollingUpdate\n    # rollingUpdate:\n    #   maxSurge: 25%\n    #   maxUnavailable: 25%\n  livenessProbe:\n    exec:\n      # -- Liveness probe command\n      # @default -- a `celery inspect ping` command\n      command:\n        - sh\n        - -c\n        - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME\n    initialDelaySeconds: 120\n    timeoutSeconds: 60\n    failureThreshold: 3\n    periodSeconds: 60\n    successThreshold: 1\n  # -- No startup/readiness probes by default since we don't really care about its startup time (it doesn't serve traffic)\n  startupProbe: {}\n  # -- No startup/readiness probes by default since we don't really care about its startup time (it doesn't serve traffic)\n  readinessProbe: {}\n  # -- Set priorityClassName for supersetWorker pods\n  priorityClassName: ~\n\n# Superset beat configuration (to trigger scheduled jobs like reports)\nsupersetCeleryBeat:\n  # -- This is only required if you intend to use alerts and reports\n  enabled: false\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetCeleryBeat pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  # -- Command\n  # @default -- a `celery beat` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app beat --pidfile /tmp/celerybeat.pid --schedule /tmp/celerybeat-schedule\"\n  # -- If true, forces deployment to reload on each upgrade\n  forceReload: false\n  # -- List of init containers\n  # @default -- a container waiting for postgres\n  initContainers:\n    - name: wait-for-postgres-redis\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -wait \"tcp://$REDIS_HOST:$REDIS_PORT\" -timeout 120s\n  # -- Launch additional containers into supersetCeleryBeat pods\n  extraContainers: []\n  # -- Annotations to be added to supersetCeleryBeat deployment\n  deploymentAnnotations: {}\n  # -- Affinity to be added to supersetCeleryBeat deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetCeleryBeat deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetCeleryBeat pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetCeleryBeat pods\n  podLabels: {}\n  # -- Resource settings for the CeleryBeat pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  # -- Set priorityClassName for CeleryBeat pods\n  priorityClassName: ~\n\nsupersetCeleryFlower:\n  # -- Enables a Celery flower deployment (management UI to monitor celery jobs)\n  # WARNING: on superset 1.x, this requires a Superset image that has `flower\u003c1.0.0` installed (which is NOT the case of the default images)\n  # flower\u003e=1.0.0 requires Celery 5+ which Superset 1.5 does not support\n  enabled: false\n  replicaCount: 1\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetCeleryFlower pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  # -- Command\n  # @default -- a `celery flower` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \"celery --app=superset.tasks.celery_app:app flower\"\n  service:\n    type: ClusterIP\n    annotations: {}\n    loadBalancerIP: ~\n    port: 5555\n    nodePort:\n      # -- (int)\n      http: nil\n  startupProbe:\n    httpGet:\n      path: /api/workers\n      port: flower\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 60\n    periodSeconds: 5\n    successThreshold: 1\n  livenessProbe:\n    httpGet:\n      path: /api/workers\n      port: flower\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  readinessProbe:\n    httpGet:\n      path: /api/workers\n      port: flower\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  # -- List of init containers\n  # @default -- a container waiting for postgres and redis\n  initContainers:\n    - name: wait-for-postgres-redis\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -wait \"tcp://$REDIS_HOST:$REDIS_PORT\" -timeout 120s\n  # -- Launch additional containers into supersetCeleryFlower pods\n  extraContainers: []\n  # -- Annotations to be added to supersetCeleryFlower deployment\n  deploymentAnnotations: {}\n  # -- Affinity to be added to supersetCeleryFlower deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetCeleryFlower deployments\n  topologySpreadConstraints: []\n  # -- Annotations to be added to supersetCeleryFlower pods\n  podAnnotations: {}\n  # -- Labels to be added to supersetCeleryFlower pods\n  podLabels: {}\n  # -- Resource settings for the CeleryBeat pods - these settings overwrite might existing values from the global resources object defined above.\n  resources: {}\n    # limits:\n    #  cpu: 100m\n    #  memory: 128Mi\n    # requests:\n    #  cpu: 100m\n    #  memory: 128Mi\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  # -- Set priorityClassName for supersetCeleryFlower pods\n  priorityClassName: ~\n\nsupersetWebsockets:\n  # -- This is only required if you intend to use `GLOBAL_ASYNC_QUERIES` in `ws` mode\n  # see https://github.com/apache/superset/blob/master/CONTRIBUTING.md#async-chart-queries\n  enabled: false\n  replicaCount: 1\n  # -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for supersetWebsockets pods\n  podDisruptionBudget:\n    # -- Whether the pod disruption budget should be created\n    enabled: false\n    # -- If set, maxUnavailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    minAvailable: 1\n    # -- If set, minAvailable must not be set - see https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n    maxUnavailable: 1\n  ingress:\n    path: /ws\n    pathType: Prefix\n  image:\n    # -- There is no official image (yet), this one is community-supported\n    repository: oneacrefund/superset-websocket\n    tag: latest\n    pullPolicy: IfNotPresent\n  # -- The config.json to pass to the server, see https://github.com/apache/superset/tree/master/superset-websocket\n  # Note that the configuration can also read from environment variables (which will have priority), see https://github.com/apache/superset/blob/master/superset-websocket/src/config.ts for a list of supported variables\n  # @default -- see `values.yaml`\n  config:\n    {\n      \"port\": 8080,\n      \"logLevel\": \"debug\",\n      \"logToFile\": false,\n      \"logFilename\": \"app.log\",\n      \"statsd\": { \"host\": \"127.0.0.1\", \"port\": 8125, \"globalTags\": [] },\n      \"redis\":\n        {\n          \"port\": 6379,\n          \"host\": \"127.0.0.1\",\n          \"password\": \"\",\n          \"db\": 0,\n          \"ssl\": false,\n        },\n      \"redisStreamPrefix\": \"async-events-\",\n      \"jwtSecret\": \"CHANGE-ME\",\n      \"jwtCookieName\": \"async-token\",\n    }\n  service:\n    type: ClusterIP\n    annotations: {}\n    loadBalancerIP: ~\n    port: 8080\n    nodePort:\n      # -- (int)\n      http: nil\n  command: []\n  resources: {}\n  # -- Launch additional containers into supersetWebsockets pods\n  extraContainers: []\n  deploymentAnnotations: {}\n  # -- Affinity to be added to supersetWebsockets deployment\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to supersetWebsockets deployments\n  topologySpreadConstraints: []\n  podAnnotations: {}\n  podLabels: {}\n  strategy: {}\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  startupProbe:\n    httpGet:\n      path: /health\n      port: ws\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 60\n    periodSeconds: 5\n    successThreshold: 1\n  livenessProbe:\n    httpGet:\n      path: /health\n      port: ws\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  readinessProbe:\n    httpGet:\n      path: /health\n      port: ws\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n    failureThreshold: 3\n    periodSeconds: 5\n    successThreshold: 1\n  # -- Set priorityClassName for supersetWebsockets pods\n  priorityClassName: ~\n\ninit:\n  # Configure resources\n  # Warning: fab command consumes a lot of ram and can\n  # cause the process to be killed due to OOM if it exceeds limit\n  # Make sure you are giving a strong password for the admin user creation( else make sure you are changing after setup)\n  # Also change the admin email to your own custom email.\n  resources: {}\n    # limits:\n    #   cpu:\n    #   memory:\n    # requests:\n    #   cpu:\n    #   memory:\n  # -- Command\n  # @default -- a `superset_init.sh` command\n  command:\n    - \"/bin/sh\"\n    - \"-c\"\n    - \". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh\"\n  enabled: true\n  jobAnnotations:\n    \"helm.sh/hook\": post-install,post-upgrade\n    \"helm.sh/hook-delete-policy\": \"before-hook-creation\"\n  loadExamples: false\n  createAdmin: true\n  adminUser:\n    username: admin\n    firstname: Superset\n    lastname: Admin\n    email: admin@superset.com\n    password: admin\n  # -- List of initContainers\n  # @default -- a container waiting for postgres\n  initContainers:\n    - name: wait-for-postgres\n      image: \"{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}\"\n      imagePullPolicy: \"{{ .Values.initImage.pullPolicy }}\"\n      envFrom:\n        - secretRef:\n            name: \"{{ tpl .Values.envFromSecret . }}\"\n      command:\n        - /bin/sh\n        - -c\n        - dockerize -wait \"tcp://$DB_HOST:$DB_PORT\" -timeout 120s\n  # -- A Superset init script\n  # @default -- a script to create admin user and initialize roles\n  initscript: |-\n    #!/bin/sh\n    set -eu\n    echo \"Upgrading DB schema...\"\n    superset db upgrade\n    echo \"Initializing roles...\"\n    superset init\n    {{ if .Values.init.createAdmin }}\n    echo \"Creating admin user...\"\n    superset fab create-admin \\\n                    --username {{ .Values.init.adminUser.username }} \\\n                    --firstname {{ .Values.init.adminUser.firstname }} \\\n                    --lastname {{ .Values.init.adminUser.lastname }} \\\n                    --email {{ .Values.init.adminUser.email }} \\\n                    --password {{ .Values.init.adminUser.password }} \\\n                    || true\n    {{- end }}\n    {{ if .Values.init.loadExamples }}\n    echo \"Loading examples...\"\n    superset load_examples\n    {{- end }}\n    if [ -f \"{{ .Values.extraConfigMountPath }}/import_datasources.yaml\" ]; then\n      echo \"Importing database connections.... \"\n      superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml\n    fi\n  # -- Launch additional containers into init job pod\n  extraContainers: []\n  ## Annotations to be added to init job pods\n  podAnnotations: {}\n  # Labels to be added to init job pods\n  podLabels: {}\n  podSecurityContext: {}\n  containerSecurityContext: {}\n  ## Tolerations to be added to init job pods\n  tolerations: []\n  ## Affinity to be added to init job pods\n  affinity: {}\n  # -- TopologySpreadConstrains to be added to init job\n  topologySpreadConstraints: []\n  # -- Set priorityClassName for init job pods\n  priorityClassName: ~\n\n# -- Configuration values for the postgresql dependency.\n# ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql\n# @default -- see `values.yaml`\npostgresql:\n  ##\n  ## Use the PostgreSQL chart dependency.\n  ## Set to false if bringing your own PostgreSQL.\n  enabled: false\n\n  ## Authentication parameters\n  auth:\n    ## The name of an existing secret that contains the postgres password.\n    existingSecret:\n    ## PostgreSQL name for a custom user to create\n    username: superset\n    ## PostgreSQL password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided\n    password: superset\n    ## PostgreSQL name for a custom database to create\n    database: superset\n\n  image:\n    tag: \"14.17.0-debian-12-r3\"\n\n  ## PostgreSQL Primary parameters\n  primary:\n    ##\n    ## Persistent Volume Storage configuration.\n    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes\n    persistence:\n      ##\n      ## Enable PostgreSQL persistence using Persistent Volume Claims.\n      enabled: true\n      ##\n      # Persistent class\n      storageClass: gp3\n      ##\n      ## Access modes:\n      accessModes:\n        - ReadWriteOnce\n    ## PostgreSQL port\n    service:\n      ports:\n        postgresql: \"5432\"\n\n# -- Configuration values for the Redis dependency.\n# ref: https://github.com/bitnami/charts/blob/master/bitnami/redis\n# More documentation can be found here: https://artifacthub.io/packages/helm/bitnami/redis\n# @default -- see `values.yaml`\nredis:\n  ##\n  ## Use the redis chart dependency.\n  ##\n  ## If you are bringing your own redis, you can set the host in supersetNode.connections.redis_host\n  ##\n  ## Set to false if bringing your own redis.\n  enabled: true\n  ##\n  ## Set architecture to standalone/replication\n  architecture: standalone\n  ##\n  ## Auth configuration:\n  ##\n  auth:\n    ## Enable password authentication\n    enabled: false\n    ## The name of an existing secret that contains the redis password.\n    existingSecret: \"\"\n    ## Name of the key containing the secret.\n    existingSecretKey: \"\"\n    ## Redis password\n    password: superset\n  ##\n  ## Master configuration\n  ##\n  master:\n    ##\n    ## Image configuration\n    # image:\n    ##\n    ## docker registry secret names (list)\n    # pullSecrets: nil\n    ##\n    ## Configure persistence\n    persistence:\n      ##\n      ## Use a PVC to persist data.\n      enabled: false\n      ##\n      ## Persistent class\n      # storageClass: classname\n      ##\n      ## Access mode:\n      accessModes:\n        - ReadWriteOnce\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\n# -- TopologySpreadConstrains to be added to all deployments\ntopologySpreadConstraints: []\n\n# -- Set priorityClassName for superset pods\npriorityClassName: ~"
            ],
            "verify": false,
            "version": "0.14.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
